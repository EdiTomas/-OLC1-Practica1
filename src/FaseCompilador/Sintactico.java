
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package FaseCompilador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import ArchivoDeReportes.Imprimir;
import ArchivoDeReportes.Contar;
import ArchivoDeReportes.ContarSi;
import ArchivoDeReportes.Graficar;
import ArchivoDeReportes.LeerArchivo;
import ArchivoDeReportes.ObtenerSi;
import ArchivoDeReportes.Promedio;
import ArchivoDeReportes.Sumar;
import AnalizadorInterno.Variable;
import ArchivoDeReportes.ID;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\004\007\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\006\000\002\006\010\000\002\006\006\000\002\006" +
    "\010\000\002\006\014\000\002\006\014\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\013\017\000\002" +
    "\010\007\000\002\011\005\000\002\011\003\000\002\012" +
    "\003\000\002\012\004\000\002\012\004\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\014\003\000" +
    "\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\014\025\012\027\010\034\005\036\007\037" +
    "\013\001\002\000\016\002\ufffe\025\ufffe\027\ufffe\034\ufffe" +
    "\036\ufffe\037\ufffe\001\002\000\004\006\ufff6\001\002\000" +
    "\004\002\140\001\002\000\004\023\131\001\002\000\004" +
    "\006\ufff7\001\002\000\004\006\036\001\002\000\004\006" +
    "\ufff8\001\002\000\004\023\022\001\002\000\016\002\000" +
    "\025\012\027\010\034\005\036\007\037\013\001\002\000" +
    "\016\002\ufffc\025\ufffc\027\ufffc\034\ufffc\036\ufffc\037\ufffc" +
    "\001\002\000\016\002\ufffa\025\ufffa\027\ufffa\034\ufffa\036" +
    "\ufffa\037\ufffa\001\002\000\016\002\uffff\025\uffff\027\uffff" +
    "\034\uffff\036\uffff\037\uffff\001\002\000\016\002\ufffd\025" +
    "\ufffd\027\ufffd\034\ufffd\036\ufffd\037\ufffd\001\002\000\016" +
    "\002\ufffb\025\ufffb\027\ufffb\034\ufffb\036\ufffb\037\ufffb\001" +
    "\002\000\004\007\023\001\002\000\004\011\024\001\002" +
    "\000\004\007\025\001\002\000\004\011\026\001\002\000" +
    "\004\006\027\001\002\000\004\011\030\001\002\000\004" +
    "\007\031\001\002\000\004\011\032\001\002\000\004\007" +
    "\033\001\002\000\004\024\034\001\002\000\004\010\035" +
    "\001\002\000\016\002\uffe9\025\uffe9\027\uffe9\034\uffe9\036" +
    "\uffe9\037\uffe9\001\002\000\004\017\037\001\002\000\016" +
    "\026\043\030\041\031\044\032\040\033\046\035\045\001" +
    "\002\000\004\023\124\001\002\000\004\023\117\001\002" +
    "\000\004\010\116\001\002\000\004\023\113\001\002\000" +
    "\004\023\110\001\002\000\004\023\077\001\002\000\004" +
    "\023\047\001\002\000\004\006\050\001\002\000\004\011" +
    "\051\001\002\000\004\007\052\001\002\000\004\011\053" +
    "\001\002\000\016\014\055\015\060\016\054\020\062\021" +
    "\056\022\057\001\002\000\004\011\uffed\001\002\000\004" +
    "\011\uffef\001\002\000\004\011\uffeb\001\002\000\004\011" +
    "\uffea\001\002\000\004\011\uffee\001\002\000\004\011\063" +
    "\001\002\000\004\011\uffec\001\002\000\016\004\066\005" +
    "\065\006\073\007\064\012\070\013\072\001\002\000\006" +
    "\011\uffe5\024\uffe5\001\002\000\006\011\uffe1\024\uffe1\001" +
    "\002\000\006\011\uffe2\024\uffe2\001\002\000\004\024\076" +
    "\001\002\000\006\004\uffde\005\uffde\001\002\000\006\004" +
    "\075\005\074\001\002\000\006\004\uffdf\005\uffdf\001\002" +
    "\000\006\011\uffe0\024\uffe0\001\002\000\006\011\uffe3\024" +
    "\uffe3\001\002\000\006\011\uffe4\024\uffe4\001\002\000\004" +
    "\010\ufff1\001\002\000\004\006\100\001\002\000\004\011" +
    "\101\001\002\000\004\007\102\001\002\000\004\011\103" +
    "\001\002\000\016\014\055\015\060\016\054\020\062\021" +
    "\056\022\057\001\002\000\004\011\105\001\002\000\016" +
    "\004\066\005\065\006\073\007\064\012\070\013\072\001" +
    "\002\000\004\024\107\001\002\000\004\010\ufff0\001\002" +
    "\000\004\006\111\001\002\000\004\024\112\001\002\000" +
    "\004\010\ufff3\001\002\000\004\007\114\001\002\000\004" +
    "\024\115\001\002\000\004\010\ufff5\001\002\000\016\002" +
    "\ufff9\025\ufff9\027\ufff9\034\ufff9\036\ufff9\037\ufff9\001\002" +
    "\000\004\006\120\001\002\000\004\011\121\001\002\000" +
    "\004\007\122\001\002\000\004\024\123\001\002\000\004" +
    "\010\ufff4\001\002\000\004\006\125\001\002\000\004\011" +
    "\126\001\002\000\004\007\127\001\002\000\004\024\130" +
    "\001\002\000\004\010\ufff2\001\002\000\016\004\066\005" +
    "\065\006\073\007\064\012\070\013\072\001\002\000\006" +
    "\011\uffe6\024\uffe6\001\002\000\006\011\135\024\134\001" +
    "\002\000\004\010\137\001\002\000\016\004\066\005\065" +
    "\006\073\007\064\012\070\013\072\001\002\000\006\011" +
    "\uffe7\024\uffe7\001\002\000\016\002\uffe8\025\uffe8\027\uffe8" +
    "\034\uffe8\036\uffe8\037\uffe8\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\016\002\005\003\013\004\003\005\010\010" +
    "\014\013\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\016\005\010\010\017\013\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\066\014\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\103\001\001\000\002\001\001\000\006\012" +
    "\105\014\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\132\012\131\014\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\135\014\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



      public static ArrayList<ErrorParser> ErrorSintactico = new ArrayList();
      public static ArrayList<ErrorSemantico> listaErrorSemantico = new ArrayList();
      public static ArrayList<Imprimir> print = new ArrayList();
      public static ArrayList<Graficar> grafico = new ArrayList();   
      public static ArrayList<Variable> globales = new ArrayList(); 
/************-----------------Metodo al que se llama automáticamente ante algún error sintactico.--------------------*/
            
     public void syntax_error(Symbol s)
    {
          try{
                    System.err.println("Error Sintactico En la linea" + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
                    +  s.value.toString()   + " no reconocido1." );
                    int columna = s.right;
                    int fila = s.left;
                    String lexema = s.value.toString();
                    ErrorParser datos = new ErrorParser("Error Sintactico",lexema,fila, columna,"Se esperaba caracter");
                    ErrorSintactico.add(datos);
             }
                    catch(Exception error){}
    }

/**----------------Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.---------------------*/
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
                try{
                     
                    System.err.println("Error Sintactico En la linea" + (s.left+1) +" Columna "+(s.right+1)+ ". Identificador "
                    +  s.value.toString()   + " no reconocido1." );
                     int columna = s.right;
                     int fila = s.left;
                     String lexema = s.value.toString();
                     ErrorParser datos = new ErrorParser("Error Sintactico",lexema,fila, columna,"Se esperaba caracter");
                     ErrorSintactico.add(datos);
                    } catch(Exception er){}
   }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ARCHIVOREPORTES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ARCHIVOREPORTES ::= ARCHIVOREPORTES DECLARACIONVARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                           globales.add(a);
                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOREPORTES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ARCHIVOREPORTES ::= DECLARACIONVARIABLES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Variable a = (Variable)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                           globales.add(a);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOREPORTES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ARCHIVOREPORTES ::= ARCHIVOREPORTES IMPRIMIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            print.add(a);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOREPORTES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ARCHIVOREPORTES ::= IMPRIMIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Imprimir a = (Imprimir)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                          print.add(a);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOREPORTES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARCHIVOREPORTES ::= ARCHIVOREPORTES GRAFICAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Graficar a = (Graficar)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                         grafico.add(a);
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOREPORTES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARCHIVOREPORTES ::= GRAFICAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Graficar a = (Graficar)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                          grafico.add(a);   
                      
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVOREPORTES",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECLARACIONVARIABLES ::= TIPO id eqa FUNCION puntoycoma 
            {
              Variable RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                            if (tipo.toString().equalsIgnoreCase("Archivo") && f instanceof LeerArchivo) {
                        RESULT = new Variable(tipo.toString(), a, f, fright + 1, fleft + 1);
                    } else if (tipo.toString().equalsIgnoreCase("Numerico") && f instanceof Sumar) {
                        RESULT = new Variable(tipo.toString(), a, f, fright + 1, fleft + 1);

                    } else if (tipo.toString().equalsIgnoreCase("Numerico") && f instanceof Contar) {
                        RESULT = new Variable(tipo.toString(), a, f, fright + 1, fleft + 1);

                    } else if (tipo.toString().equalsIgnoreCase("Numerico") && f instanceof Promedio) {
                        RESULT = new Variable(tipo.toString(), a, f, fright + 1, fleft + 1);

                    } else if (tipo.toString().equalsIgnoreCase("Numerico") && f instanceof ContarSi) {
                        RESULT = new Variable(tipo.toString(), a, f, fright + 1, fleft + 1);

                    } else if (tipo.toString().equalsIgnoreCase("Cadena") && f instanceof ObtenerSi) {
                        RESULT = new Variable(tipo.toString(), a, f, fright + 1, fleft + 1);
                    } else {
                        // error semantico
                        RESULT = new Variable(tipo.toString(), a, f, fright + 1, fleft + 1);
                }
                         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACIONVARIABLES",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPO ::= archivo 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
              RESULT =val;  
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPO ::= numero 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
               RESULT =val;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPO ::= cadena 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT =val;
           
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCION ::= leerarchivo pa_open texto pa_close 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                   // String ruta = "\""+ val + "\"";             
                 // LeerArchivo nuevoarchivo 
                  RESULT  =  new LeerArchivo(val,valright+1,valleft+1);       
                    
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCION ::= suma pa_open id coma texto pa_close 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Sumar(id,texto,idright+1,idleft+1);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCION ::= contar pa_open id pa_close 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                    RESULT = new Contar(id,idright+1,idleft+1); 
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION ::= promedio pa_open id coma texto pa_close 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                     RESULT = new Promedio(id,texto,idright+1,idleft+1); 
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION ::= contarsi pa_open id coma texto coma OPERADORRACIONAL coma VALOR pa_close 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                     RESULT = new  ContarSi(id,texto,(String)signo,valor,valorright+1,valorleft+1);   
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCION ::= obtenersi pa_open id coma texto coma OPERADORRACIONAL coma VALOR pa_close 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int textoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int textoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String texto = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int signoleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int signoright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object signo = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                     RESULT = new  ObtenerSi(id,texto,(String)signo,valor,valorright+1,valorleft+1);
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OPERADORRACIONAL ::= menor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                           RESULT = a;
                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORRACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OPERADORRACIONAL ::= mayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = a;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORRACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // OPERADORRACIONAL ::= equals 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                             RESULT = a;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORRACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // OPERADORRACIONAL ::= diferente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = a;
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORRACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // OPERADORRACIONAL ::= menorigual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                           RESULT = a;
                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORRACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // OPERADORRACIONAL ::= mayorigual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                          RESULT = a;
                       
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERADORRACIONAL",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GRAFICAR ::= graficar pa_open texto coma texto coma id coma texto coma texto pa_close puntoycoma 
            {
              Graficar RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
     RESULT = new Graficar(a,b,id,c,d);

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("GRAFICAR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IMPRIMIR ::= imprimir pa_open LISTAEXPRESIONES pa_close puntoycoma 
            {
              Imprimir RESULT =null;
		int listaExpresionesleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int listaExpresionesright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> listaExpresiones = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT =  new Imprimir(listaExpresiones);      

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAEXPRESIONES ::= LISTAEXPRESIONES coma VALOR 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                 RESULT = a;
                                 RESULT.add(b);
                          
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAEXPRESIONES ::= VALOR 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new ArrayList();
                            RESULT.add(a);
                         
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESIONES",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= texto 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT = val.toString();
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= SIGNO entero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = Double.parseDouble(a.toString()+""+val.toString());
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= SIGNO decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                 RESULT = Double.parseDouble(a.toString()+""+val.toString());
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= entero 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                 RESULT = Double.parseDouble(entero.toString());
               
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= decimal 
            {
              Object RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String decimal = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                  RESULT = Double.parseDouble(decimal.toString());
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= id 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                   RESULT = new ID(id,idright+1,idleft+1);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VALOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SIGNO ::= menos 
            {
              Object RESULT =null;
		int menosleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int menosright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String menos = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
               RESULT = menos;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SIGNO ::= mas 
            {
              Object RESULT =null;
		int masleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int masright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String mas = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = mas;
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SIGNO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
