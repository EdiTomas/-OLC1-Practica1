/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Aplicacion;

import AnalizadorInterno.Analizador;
import FaseCompilador.Lexico;
import static FaseCompilador.Lexico.listaError;
import FaseCompilador.Sintactico;
import static FaseCompilador.Sintactico.ErrorSintactico;
import static FaseCompilador.Sintactico.globales;
import static FaseCompilador.Sintactico.grafico;
import static FaseCompilador.Sintactico.listaErrorSemantico;
import static FaseCompilador.Sintactico.print;
import ArchivoDeReportes.LeerArchivo;
//import static FaseCompilador2.Parser.listastring;
import Reportes.ListaReportesHtml;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import javax.swing.event.CaretEvent;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author edi
 */
public class Ventana extends javax.swing.JFrame {

    public static ArrayList<JTextPane> texto = new ArrayList();
    public static int numero;
    JTextPane editor = new JTextPane();
    ImageIcon icon;
    JFileChooser seleccionar = new JFileChooser();
    public static File archivo;
    FileInputStream entrada;
    FileOutputStream salida;
    ListaReportesHtml lrh = new ListaReportesHtml();

    /**
     * Creates new form Ventana
     */
    public Ventana() {
        initComponents();
        numero = -1;
        icon = new ImageIcon("src/Imagenes/escudo10.png");

    }

    public void NuevoArchivos() {

        numero++;
        texto.add(editor);
        PanelTab btc = new PanelTab(Pestana, numero);
        LineasTexto tmpL = new LineasTexto();
        texto.set(numero, tmpL.texto);
        texto.get(numero).setBackground(Color.black);
        texto.get(numero).setSelectionColor(Color.CYAN);
        texto.get(numero).setForeground(Color.white);

        posicionPuntero(tmpL);
        JPanel tmpP = new JPanel(new BorderLayout());
        tmpP.add(tmpL, BorderLayout.WEST);
        tmpP.add(tmpL.texto, BorderLayout.CENTER);

        Pestana.addTab("Nueva PestaÃ±a", new JScrollPane(tmpP));
        Pestana.setTabComponentAt(numero, btc);

        Pestana.setBackgroundAt(numero, Color.CYAN);

    }

    private void posicionPuntero(LineasTexto lines) {
        lines.texto.addCaretListener((CaretEvent e) -> {
            int pos = e.getDot();
            int fila = 1, columna = 0;
            int ultimalinea = -1;
            String text = lines.texto.getText().replaceAll("\r", "");
            for (int i = 0; i < pos; i++) {
            }
            columna = pos - ultimalinea;
        }
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Pestana = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        JArchivo = new javax.swing.JMenu();
        JmNuevo = new javax.swing.JMenuItem();
        JmAbrir = new javax.swing.JMenuItem();
        JmGuardar = new javax.swing.JMenuItem();
        JmGuardarComo = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        JmReporteLexico = new javax.swing.JMenuItem();
        JmReporteSintactico = new javax.swing.JMenuItem();
        JmReporteSemantico = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        JmEjecutar = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        JmManualUsuario = new javax.swing.JMenuItem();
        JmManualTecnico = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Practica1_201503783");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Imagenes/escudo10.png")));
        setResizable(false);

        Pestana.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane2.addTab("Consola", jScrollPane1);

        JArchivo.setText("Archivo");

        JmNuevo.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/1004File.ico")); // NOI18N
        JmNuevo.setText("Nuevo");
        JmNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmNuevoActionPerformed(evt);
            }
        });
        JArchivo.add(JmNuevo);

        JmAbrir.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/13223.ico")); // NOI18N
        JmAbrir.setText("Abrir");
        JmAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmAbrirActionPerformed(evt);
            }
        });
        JArchivo.add(JmAbrir);

        JmGuardar.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/5708Guardar.ico")); // NOI18N
        JmGuardar.setText("Guardar");
        JmGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmGuardarActionPerformed(evt);
            }
        });
        JArchivo.add(JmGuardar);

        JmGuardarComo.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/3023GuardarComo.ico")); // NOI18N
        JmGuardarComo.setText("Guardar Como");
        JmGuardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmGuardarComoActionPerformed(evt);
            }
        });
        JArchivo.add(JmGuardarComo);

        jMenuBar1.add(JArchivo);

        jMenu2.setText("Reporte");

        JmReporteLexico.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/5821html.ico")); // NOI18N
        JmReporteLexico.setText("ErrorLexico");
        JmReporteLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmReporteLexicoActionPerformed(evt);
            }
        });
        jMenu2.add(JmReporteLexico);

        JmReporteSintactico.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/5821html.ico")); // NOI18N
        JmReporteSintactico.setText("ErrorSintactico");
        JmReporteSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmReporteSintacticoActionPerformed(evt);
            }
        });
        jMenu2.add(JmReporteSintactico);

        JmReporteSemantico.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/5821html.ico")); // NOI18N
        JmReporteSemantico.setText("ErrorSemantico");
        JmReporteSemantico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmReporteSemanticoActionPerformed(evt);
            }
        });
        jMenu2.add(JmReporteSemantico);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Compilador");

        JmEjecutar.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/8602Play.ico")); // NOI18N
        JmEjecutar.setText("Ejecutar");
        JmEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmEjecutarActionPerformed(evt);
            }
        });
        jMenu3.add(JmEjecutar);

        jMenuBar1.add(jMenu3);

        jMenu1.setText("Ayuda");

        JmManualUsuario.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/7583Pdf.ico")); // NOI18N
        JmManualUsuario.setText("Manual Usuario");
        JmManualUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmManualUsuarioActionPerformed(evt);
            }
        });
        jMenu1.add(JmManualUsuario);

        JmManualTecnico.setIcon(new javax.swing.ImageIcon("/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/src/Imagenes/7583Pdf.ico")); // NOI18N
        JmManualTecnico.setText("Manual Tecnico");
        JmManualTecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JmManualTecnicoActionPerformed(evt);
            }
        });
        jMenu1.add(JmManualTecnico);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Pestana)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE))
                .addContainerGap(154, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(47, Short.MAX_VALUE)
                .addComponent(Pestana, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JmAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmAbrirActionPerformed
        this.Open();
    }//GEN-LAST:event_JmAbrirActionPerformed

    public void Open() {

        if (numero != -1) {
            archivo = new File("/home/edi/Descargas");
            seleccionar.setCurrentDirectory(archivo);
            if (seleccionar.showDialog(null, "Abrir") == JFileChooser.APPROVE_OPTION) {
                //   FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos", "txt", "uweb");
                FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos", "dat", "rep", "txt");
                seleccionar.setFileFilter(filtro);
                archivo = seleccionar.getSelectedFile();
                if (archivo.canRead()) {
                    String documento = LeerArchivo(archivo.getPath());
                    //  jTextArea1.setText(documento);
                    texto.get(Pestana.getSelectedIndex()).setText(documento);
                    Pestana.setTitleAt(Pestana.getSelectedIndex(), archivo.getName());
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No existe ninguna pestaÃ±a");
        }
    }

    public String LeerArchivo(String ruta) {
        String temp = "";
        try {
            BufferedReader bf = new BufferedReader(new FileReader(ruta));
            String bfRead;
            while ((bfRead = bf.readLine()) != null) {
                temp = temp + bfRead + "\n";
            }
        } catch (Exception e) {
        }
        return temp;
    }

    public String GuardarArchivo(File Archivo, String documento) {
        String mensaje = null;
        try {

            salida = new FileOutputStream(Archivo);
            byte[] bytxt = documento.getBytes();
            salida.write(bytxt);
            mensaje = "Archivo Guardado";
        } catch (Exception v) {
        }
        return mensaje;
    }

    public void save() {
        if (numero != -1) {
            String ruta = seleccionar.getCurrentDirectory() + "/" + Pestana.getTitleAt(Pestana.getSelectedIndex());
            File arc = new File(ruta);
            System.out.println(arc.getAbsolutePath());
            System.out.println(arc);

            if (arc.exists()) {
                arc = arc.getAbsoluteFile();
                if (archivo.getName().endsWith("dat") || archivo.getName().endsWith("rep") || archivo.getName().endsWith("txt")) {
                    String Documento = texto.get(Pestana.getSelectedIndex()).getText();
                    System.out.println(texto.get(Pestana.getSelectedIndex()).getText());
                    String Mensaje = GuardarArchivo(arc, Documento);
                    Pestana.setTitleAt(Pestana.getSelectedIndex(), arc.getName());
                    if (Mensaje != null) {
                        JOptionPane.showMessageDialog(null, Mensaje);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se guardo el Documento");
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No se guardo el Documento");
                }

            } else {
                if (seleccionar.showDialog(null, "Guardar") == JFileChooser.APPROVE_OPTION) {
                    archivo = seleccionar.getSelectedFile();

                    if (archivo.getName().endsWith("dat") || archivo.getName().endsWith("rep") || archivo.getName().endsWith("txt")) {
                        String Documento = texto.get(Pestana.getSelectedIndex()).getText();
                        String Mensaje = GuardarArchivo(archivo, Documento);
                        Pestana.setTitleAt(Pestana.getSelectedIndex(), archivo.getName());
                        if (Mensaje != null) {
                            JOptionPane.showMessageDialog(null, Mensaje);
                        } else {
                            JOptionPane.showMessageDialog(null, "No se guardo el Documento");
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "No se guardo el Documento");

                    }

                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "No existe ninguna pestaÃ±a");
        }
 }


    private void JmNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmNuevoActionPerformed
        this.NuevoArchivos();
    }//GEN-LAST:event_JmNuevoActionPerformed

    private void JmGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmGuardarActionPerformed
        this.save();

    }//GEN-LAST:event_JmGuardarActionPerformed

    private void JmGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmGuardarComoActionPerformed
        this.saveAs();
    }//GEN-LAST:event_JmGuardarComoActionPerformed


    private void JmEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmEjecutarActionPerformed

        if (numero != -1) {
            if (texto.get(Pestana.getSelectedIndex()).getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Por favor llene los campos");
            } else {
                this.Ejecutar();
            }
        } else {
            JOptionPane.showMessageDialog(null, "No existe ninguna pestaÃ±a");
        }

    }//GEN-LAST:event_JmEjecutarActionPerformed

    private void JmReporteLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmReporteLexicoActionPerformed

        try {
            lrh.GenerarReportesErroresLexicos();
            ProcessBuilder pbuilder;
            pbuilder = new ProcessBuilder("run-mailcap", "ReporteErrorLexico.html");
            pbuilder.redirectErrorStream(true);
            //Ejecuta el proceso
            pbuilder.start();
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_JmReporteLexicoActionPerformed

    private void JmReporteSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmReporteSintacticoActionPerformed

        try {
            lrh.GenerarReportesErroresSintacticos();
            ProcessBuilder pbuilder;
            pbuilder = new ProcessBuilder("run-mailcap", "ReporteErrorSintactico.html");
            pbuilder.redirectErrorStream(true);
            pbuilder.start();
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }

        /*
                try {
                String url ="/home/edi/NetBeansProjects/[OLC1]201503783_Practica1/ReporteErrorSintactico.html";
                ProcessBuilder p = new ProcessBuilder();
                p.command("run-mailcap", "/home/edi", url);
               // Process process = p.start();
                p.start();
            } catch (Exception error) {
                System.out.println(""+error);
            }
         */
    }//GEN-LAST:event_JmReporteSintacticoActionPerformed

    private void JmReporteSemanticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmReporteSemanticoActionPerformed
        try {
            lrh.GenerarReportesErroresSemanticos();
            ProcessBuilder pbuilder;
            pbuilder = new ProcessBuilder("run-mailcap", "ReporteErrorSemantico.html");
            pbuilder.redirectErrorStream(true);
            pbuilder.start();
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_JmReporteSemanticoActionPerformed

    private void JmManualUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmManualUsuarioActionPerformed
     try {
            ProcessBuilder pbuilder;
            pbuilder = new ProcessBuilder("run-mailcap", "ManualUsuario.pdf");
            pbuilder.redirectErrorStream(true);
            pbuilder.start();
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_JmManualUsuarioActionPerformed

    private void JmManualTecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JmManualTecnicoActionPerformed
        try {
            ProcessBuilder pbuilder;
            pbuilder = new ProcessBuilder("run-mailcap", "ManualTecnico.pdf");
            pbuilder.redirectErrorStream(true);
            pbuilder.start();
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_JmManualTecnicoActionPerformed

    public void ReiniciarMemoria() {
        listaError.clear();
        listaError.trimToSize();
        ErrorSintactico.clear();
        ErrorSintactico.trimToSize();
        listaErrorSemantico.clear();
        listaErrorSemantico.trimToSize();
        print.clear();
        print.trimToSize();
        globales.clear();
        globales.trimToSize();
        grafico.clear();
        grafico.trimToSize();
        out = "";
    }

    public void Ejecutar() {
        this.ReiniciarMemoria();
        Lexico lx = new Lexico(new BufferedReader(new StringReader(texto.get(Pestana.getSelectedIndex()).getText())));
        Sintactico sin = new Sintactico(lx);
        try {
            lx.pintar.darEstilo(texto.get(Pestana.getSelectedIndex()).getText());
            texto.get(Pestana.getSelectedIndex()).setDocument(lx.pintar.texto.getDocument());
            sin.parse();
        } catch (Exception ex) {
            Logger.getLogger(getName()).log(Level.SEVERE, null, ex);
        }
        if (listaError.isEmpty() && ErrorSintactico.isEmpty()) {
            JOptionPane.showMessageDialog(null, "La gramatica esta correcta");
            this.Imprimir();
            this.Graficas();
        } else {
            JOptionPane.showMessageDialog(null, "La gramatica No es correcta ");
        }
    }

    public void Graficas() {
        int j;
        for (j = 0; j < grafico.size(); j++) {
            grafico.get(j).GenerarGrafica();
        }

    }

    public String out = "";

    public void Imprimir() {

        int x;
        for (x = 0; x < print.size(); x++) {
            if (print.get(x).ValidadObjecto() instanceof String) {
                out += print.get(x).ValidadObjecto() + "\n";
            }
        }
        jTextArea1.setText(out);
    }

    public void saveAs() {
        if (numero != -1) {
            if (seleccionar.showDialog(null, "Guardar Como") == JFileChooser.APPROVE_OPTION) {
                // FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos","gu");
                // seleccionar.setFileFilter(filtro);
                archivo = seleccionar.getSelectedFile();
                if (archivo.getName().endsWith("rep") || archivo.getName().endsWith("dat") || archivo.getName().endsWith("txt")) {
                    String Documento = texto.get(Pestana.getSelectedIndex()).getText();
                    String Mensaje = GuardarArchivo(archivo, Documento);
                    Pestana.setTitleAt(Pestana.getSelectedIndex(), archivo.getName());
                    if (Mensaje != null) {
                        JOptionPane.showMessageDialog(null, Mensaje);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se guardo el Documento");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No se guardo el Documento");
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "No existe ninguna pestaÃ±a");
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu JArchivo;
    private javax.swing.JMenuItem JmAbrir;
    private javax.swing.JMenuItem JmEjecutar;
    private javax.swing.JMenuItem JmGuardar;
    private javax.swing.JMenuItem JmGuardarComo;
    private javax.swing.JMenuItem JmManualTecnico;
    private javax.swing.JMenuItem JmManualUsuario;
    private javax.swing.JMenuItem JmNuevo;
    private javax.swing.JMenuItem JmReporteLexico;
    private javax.swing.JMenuItem JmReporteSemantico;
    private javax.swing.JMenuItem JmReporteSintactico;
    private javax.swing.JTabbedPane Pestana;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
